Data Types (primitive):
boolean - true/false
number - any numerical value
string - characters, word, etc, enclosed in quotes
undefined - variables that are unassigned
null - denotes lack of value

Escaping Characters:
\'      to use an apostrophe inside a string
\\      to use a backslash inside a string

Operators:
typeof  produces a string that contains the type of the operand it is used on
+       either used in arithmetic addition or concatenation of strings (overloaded operator)
-       subtraction
*       multiplication
/       division
%       modulus operator - returns the remainder after division
&&      AND - both operands must be true (has a higher precedence than ||)
||      OR - Only one of the operands need to be true
!       NOT - the opposite
==      equal in value
===     equal in value and type (strict)
!=      not equal
!==     not equal in value and type (strict)
>       greater than
>=      greater than or equal to
<       less than
<=      less than or equal to

Variables:
to define a variable:
var variableName = value; OR var variableName = value, variable2 = value;
-constants cannot be changed. To define:
const variableName = value;

Shorthand Assignment Operators:
shorthand:      example:        Equivalent:
+=              x += 2;         x = x + 2;
-=              x -= 2;         x = x -2;
*=              x *= 2;         x = x * 2;
/=              x /= 2;         x = x / 2;
%=              x %= 2;         x = x % 2;

Unary Operators:
+   plus
-   negation
++  increment
--  decrement

Converting between Strings and Numbers
variable.toString()     turns number into string
variable.toFixed(numerical value for how many decimal places desired)   returns a string with x amount of numbers after the decimal point
Number()    turns a string into a number. will result in NaN if a number is not present in the string. Will not work if a string contains numbers and characters
parseInt()      turns a string into a number. Will result in the numbers of a string being converted even if there are other characters present.

Working with strings:
.length     returns length of a string
.indexOf(char)      returns index of specified characters. -1 will be returned if character cannot be found
.replace(find, replace)     finds a subset of characters and replaces it. Returns a new string with the replacement.
.substring(fromIndex, toIndex)      returns a substring
.toUpperCase()      returns a new string in all uppper case
.toLowerCase()      returns a new string in all lower case
.trim()         returns a new string with excess whitespaces removed from the beginning and end

JavaScript with HTML:
Inline: <script>js code here</script>
External: <script src"js path file here"></script>

Logging to JavaScript Console:
console.log(what to log here);      shorthand for typing it in intellij-log + tab

Using strict:
to use, type this at the top of the inline script or js file:
"use strict";
makes it so that javascript catches errors more strictly

User Interaction:
Alert message - shows a message to the user that can be closed out by hitting okay
syntax: alert("message here");
Confirm message - user can either hit okay or cancel, will return a boolean that can be saved for future use
syntax: confirm("message here");
Prompt message - allows the user to enter information that will return a STRING that can be stored
syntax: prompt("message here");

Functions:
re-usable code for a specified task
keeps code organized

Using functions:
call the function by name, with parenthesis, and any arguments
if it returns a value, that value can be stored

Defining Functions:
function optionalFunctionName(parameters,parameters) {
    *code to run*
    return whateverToBeReturned
}


Anonymous Functions:
-functions without a name that can be stored in a variable.
Example:
var increment = function(x) {
    return x + 1;
};

var two = increment(1);

Arguments/Parameters:
argument - what the function is called with
parameter - what the function is defined with
    default parameter can be assigned - functionName(parameter, parameterWithDefault="") { (rest of function) }
*arguments passed to a function with no parameters will be ignored.

*trying to store the result of a function without a return statement will result in undefined

Function Scope:
-Where a variable can be accessed.
Global Variables:
-can be accessed anywhere
-use only when necessary
Local Variables:
-can be accessed within the scope they are declared in or any nested scopes
-take precedence over global variables

Immediately-Invoked Function Expression (IIFE)
-allows variables to be isolated
-all javascript code should be enclosed inside iife functions. this protects code from being exposed to the global scope.
Example:
// define a function and immediately invoke (i.e. call) it
(function () {
    var iffeVar = "I'm local to the IIFE.";
})();

alert(iffeVar); // undefined

Conditionals:
If/Else Statements:
-if statement executes code based on certain conditions
-if/else statement gives a default if the if statement is not met
-if/else if/else allows for multiple conditions

Ternary Operator (Shorthand If/Else):
example:
var message;
if (success) {
    message = "Operation was successful.";
} else {
    message = "Oops, something went wrong.";
}
// the above if/else can be re-written as:
var message = (success) ? "Operation was successful." : "Oops, something went wrong.";
//(thing to compare) ? (thing to do if true) : (thing to do if false);

Switch Statement:
-alternative to if-else
-cant use boolean expressions (apparently...)
    -boolean expressions can be used if true is used at the top instead of the value
    -ex:
    switch (true) {
        case (0 === 0) :
            console.log("0 is zero");
            break;
        default :
            console.log("0 is not zero");
            break;
    }

example:
switch(condition) {
    case "example" :
        //do things
        break;
    case "example 2" :
        //do more things
        break;
    default :
        //default things
        break;
}

Loops:
-While Loop - executes a black of code while a certain condition is true
while (condition) {
body
}
-do while loop - executes a code black at least once and then again while a condition is true
do {
code
} while (condition)
- for loop - loops through code while a certain condition is true - x amount of times
initialization and increment are optional
for (initialization; condition; increment) {
code
}
-Break and continue-
break - exits the loop when a certain condition is met
continue - skips one iteration of the loop when a certain condition is met


Arrays:
-ordered list of items
-denoted by [], separated by comas
-arrays can contain multiple data types in the same array
-arrays can contain arrays
-arrays indices start at 0
-items in an array can be accessed by arrayName[index no.]
-the number of items in an array can be determimed by arrayName.length
-if an array element that does not exist tries to be accessed, it will return undefined
-forEach can be used as an aleternative to looping through an array using a for loop
-for each contains a function
-someArray.forEach(function(element, index, or array) {
     // ...
 })
 -for each will be called for every item located in the array
 -Ex:
 var shapes = ['star', 'square', 'rectangle'];
 shapes.forEach(function(shape){
    console.log("here is a shape " + shape);
 });

 Manipulating Arrays:
 -push and unshift (ADDING TO ARRAY)
    -used to add items to an array
    -push adds item at END of array
    -unshift adds item to begining of array
 -you can add multiple items using push or unshift if you seperate them by commas
 -Ex's:
    arrayName.push('add me to the end');
    arrayName.unshift('add me to the beginning of the array');
    arrayName.push("add me", "add me too");
 -pop and shift (REMOVING FROM ARRAY)
    -both used to remove elements from an array
    -returns the items removed
    -pop removes the last item
    -shift removes the first item
 -Ex's
    -arrayName.pop() //removes last item
    -arrayName.shift() //removes first item
 -locating array elements
    -indexOf //starts at beginning - returns first occurance of item
    -lastIndexOf //starts at end
    EX:
        arrayName.indexOf('element name') // returns first index where that name is found
 -slicing
    -allows copying of a portion of an array
    -does not change the original array
    -takes two arguments to define where the portion wanted starts and stops - first is inclusive, second is exclusive
    ex:
        arrayName.slice(index1, index2)
        arrayName.slice(inclusive, exclusive)
        arrayName.slice(2,4) //return a new array with indices of 2 and 3
 -reversing
    -reverses the elements in an array
    EX:
        arrayName.reverse()
 -sorting
    -.sort()
    -converts items in an array to string equivalent
    -returns values sorted by that value
    -this DOES MODIFY THE ORIGINAL AND RETURNED ARRAY
 -converting between strings and arrays
    -.split() on strings will convert them to arrays
    -splits based on provided parameter
    EX:
        var string = "i am string"
        string.split("") //will return an array for every character
        string.split(" ") //will return an array for every word (seperated by space)
    -.join()
    -joins array elements into string
    -will join them with delimiter if chosen
    EX:
        var array = ["Jake", "John", "Mary"]
        array.join() // returns "JakeJohnMary"
        array.join(" ") //returns "Jake John Mary"



